<application>
  <component name="AppStorage">
    <histories>
      <item value="implement the message variant types based on their usage below" />
      <item value="Creates owned data from borrowed data, usually by cloning." />
      <item value="// Ok, here are a bunch of values-- some are `Strings`, some are `&amp;strs`. Your // task is to call one of these two functions on each value depending on what // you think each value is. That is, add either `string_slice` or `string` // before the parentheses on each line. If you're right, it will compile!" />
      <item value="Ok, here are a bunch of values-- some are `Strings`, some are `&amp;strs`." />
      <item value="The `current_favorite_color` function is currently returning a string slice with the `'static` lifetime. We know this because the data of the string lives in our code itself -- it doesn't come from a file or user input or another program -- so it will live as long as our program lives. But it is still a string slice. There's one way to create a `String` by converting a string slice covered in the Strings chapter of the book, and another way that uses the `From` trait." />
      <item value="measure" />
      <item value="mem" />
      <item value="intrinsics" />
      <item value="The stabilized version of this intrinsic is" />
      <item value="aliasing violations or data races will cause undefined behavior" />
      <item value="found reserved identifier" />
      <item value="`self` cannot be a raw identifier" />
      <item value="On all platforms, the newline is the LINE FEED character (`\n`/`U+000A`) alone /// (no additional CARRIAGE RETURN (`\r`/`U+000D`))." />
      <item value="Prints to the standard output, with a newline." />
      <item value="expected value, found builtin type `i32`" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="12" />
        <entry key="ENGLISH" value="13" />
        <entry key="VIETNAMESE" value="1" />
      </map>
    </option>
  </component>
</application>